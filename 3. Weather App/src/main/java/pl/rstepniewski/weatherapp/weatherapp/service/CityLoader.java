package pl.rstepniewski.weatherapp.weatherapp.service;

import lombok.RequiredArgsConstructor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import pl.rstepniewski.weatherapp.weatherapp.model.City;
import pl.rstepniewski.weatherapp.weatherapp.model.dto.CityDto;
import pl.rstepniewski.weatherapp.weatherapp.model.dto.CityMapper;
import pl.rstepniewski.weatherapp.weatherapp.model.dto.WeatherRequestFormDto;
import pl.rstepniewski.weatherapp.weatherapp.repository.CityRepository;

import java.util.Arrays;
import java.util.List;

@Component
@RequiredArgsConstructor
public class CityLoader implements CommandLineRunner {

    private final CityRepository repository;
    private final WeatherService weatherService;

    @Override
    public void run(String... args) throws Exception {

        /*City cityWarsaw = City.builder()
                .id(UUID.randomUUID())
                .city("Warszawa")
                .state("Woj. Mazowieckie")
                .countryName("Polska")
                .timeScore(Arrays.asList("2024-03-05T00:00","2024-03-05T01:00","2024-03-05T02:00","2024-03-05T03:00","2024-03-05T04:00",
                        "2024-03-05T05:00","2024-03-05T06:00","2024-03-05T07:00","2024-03-05T08:00","2024-03-05T09:00","2024-03-05T10:00",
                        "2024-03-05T11:00","2024-03-05T12:00","2024-03-05T13:00","2024-03-05T14:00","2024-03-05T15:00","2024-03-05T16:00",
                        "2024-03-05T17:00","2024-03-05T18:00","2024-03-05T19:00","2024-03-05T20:00","2024-03-05T21:00","2024-03-05T22:00",
                        "2024-03-05T23:00","2024-03-06T00:00","2024-03-06T01:00","2024-03-06T02:00","2024-03-06T03:00","2024-03-06T04:00",
                        "2024-03-06T05:00","2024-03-06T06:00","2024-03-06T07:00","2024-03-06T08:00","2024-03-06T09:00","2024-03-06T10:00",
                        "2024-03-06T11:00","2024-03-06T12:00","2024-03-06T13:00","2024-03-06T14:00","2024-03-06T15:00","2024-03-06T16:00",
                        "2024-03-06T17:00","2024-03-06T18:00","2024-03-06T19:00","2024-03-06T20:00","2024-03-06T21:00","2024-03-06T22:00",
                        "2024-03-06T23:00","2024-03-07T00:00","2024-03-07T01:00","2024-03-07T02:00","2024-03-07T03:00","2024-03-07T04:00",
                        "2024-03-07T05:00","2024-03-07T06:00","2024-03-07T07:00","2024-03-07T08:00","2024-03-07T09:00","2024-03-07T10:00",
                        "2024-03-07T11:00","2024-03-07T12:00","2024-03-07T13:00","2024-03-07T14:00","2024-03-07T15:00","2024-03-07T16:00",
                        "2024-03-07T17:00","2024-03-07T18:00","2024-03-07T19:00","2024-03-07T20:00","2024-03-07T21:00","2024-03-07T22:00",
                        "2024-03-07T23:00","2024-03-08T00:00","2024-03-08T01:00","2024-03-08T02:00","2024-03-08T03:00","2024-03-08T04:00",
                        "2024-03-08T05:00","2024-03-08T06:00","2024-03-08T07:00","2024-03-08T08:00","2024-03-08T09:00","2024-03-08T10:00",
                        "2024-03-08T11:00","2024-03-08T12:00","2024-03-08T13:00","2024-03-08T14:00","2024-03-08T15:00","2024-03-08T16:00",
                        "2024-03-08T17:00","2024-03-08T18:00","2024-03-08T19:00","2024-03-08T20:00","2024-03-08T21:00","2024-03-08T22:00",
                        "2024-03-08T23:00","2024-03-09T00:00","2024-03-09T01:00","2024-03-09T02:00","2024-03-09T03:00","2024-03-09T04:00",
                        "2024-03-09T05:00","2024-03-09T06:00","2024-03-09T07:00","2024-03-09T08:00","2024-03-09T09:00","2024-03-09T10:00",
                        "2024-03-09T11:00","2024-03-09T12:00","2024-03-09T13:00","2024-03-09T14:00","2024-03-09T15:00","2024-03-09T16:00",
                        "2024-03-09T17:00","2024-03-09T18:00","2024-03-09T19:00","2024-03-09T20:00","2024-03-09T21:00","2024-03-09T22:00",
                        "2024-03-09T23:00","2024-03-10T00:00","2024-03-10T01:00","2024-03-10T02:00","2024-03-10T03:00","2024-03-10T04:00",
                        "2024-03-10T05:00","2024-03-10T06:00","2024-03-10T07:00","2024-03-10T08:00","2024-03-10T09:00","2024-03-10T10:00",
                        "2024-03-10T11:00","2024-03-10T12:00","2024-03-10T13:00","2024-03-10T14:00","2024-03-10T15:00","2024-03-10T16:00",
                        "2024-03-10T17:00","2024-03-10T18:00","2024-03-10T19:00","2024-03-10T20:00","2024-03-10T21:00","2024-03-10T22:00",
                        "2024-03-10T23:00","2024-03-11T00:00","2024-03-11T01:00","2024-03-11T02:00","2024-03-11T03:00","2024-03-11T04:00",
                        "2024-03-11T05:00","2024-03-11T06:00","2024-03-11T07:00","2024-03-11T08:00","2024-03-11T09:00","2024-03-11T10:00",
                        "2024-03-11T11:00","2024-03-11T12:00","2024-03-11T13:00","2024-03-11T14:00","2024-03-11T15:00","2024-03-11T16:00",
                        "2024-03-11T17:00","2024-03-11T18:00","2024-03-11T19:00","2024-03-11T20:00","2024-03-11T21:00","2024-03-11T22:00","2024-03-11T23:00"))
                .temperature2mScore(Arrays.asList(3.1, 2.8, 2.5, 2.5, 2.4, 2.5, 2.5, 2.6, 2.9, 3.3, 3.8, 4.2, 4.6, 4.8, 5.3, 5.6, 5.6,
                        5.5, 5.5, 5.4, 5.3, 5.4, 5.6, 5.8, 6.1, 6.0, 5.7, 5.4, 4.7, 3.9, 3.5, 3.7, 4.1, 5.0, 5.5, 6.4, 6.9, 6.9, 6.6,
                        6.1, 5.4, 4.5, 3.8, 3.2, 2.6, 2.2, 1.9, 1.4, 0.7, 0.2, -0.2, -0.4, -0.6, -0.9, -1.1, -0.7, 0.4, 1.8, 3.2, 4.2,
                        4.9, 5.3, 5.4, 5.2, 4.6, 3.7, 2.8, 2.0, 1.3, 1.0, 0.8, 0.6, 0.3, 0.0, -0.2, -0.5, -0.8, -0.9, -0.9, -0.3, 0.8,
                        1.9, 3.3, 4.8, 5.9, 6.5, 6.7, 6.6, 5.9, 4.8, 3.8, 3.2, 2.7, 2.2, 1.8, 1.3, 1.0, 0.6, 0.4, 0.1, -0.2, -0.4, -0.2,
                        0.8, 2.2, 3.7, 5.3, 7.0, 8.1, 8.6, 8.6, 8.2, 7.3, 6.0, 4.8, 4.2, 3.7, 3.3, 2.7, 2.2, 1.9, 1.6, 1.8, 2.0, 2.0, 2.1,
                        2.5, 3.5, 4.9, 6.3, 8.0, 9.8, 1.1, 1.5, 1.5, 1.2, 0.5, 9.6, 8.8, 8.4, 8.1, 7.8, 7.5, 7.3, 7.1, 7.0, 7.1, 7.1, 7.1,
                        7.1, 7.5, 8.5, 9.9, 11.0, 1.8, 2.3, 2.5, 2.2, 1.7, 1.1, 0.5, 9.8, 9.2, 8.8, 8.5, 8.0, 7.3, 6.6))
                .rainScore(Arrays.asList(0.00, 0.00, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.10, 0.10, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.00,  0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.10, 0.10, 0.00, 0.00, 0.00, 0.30,
                        0.30, 0.30, 1.00, 1.00, 1.00, 0.20, 0.20, 0.20, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00,
                        0.00, 0.00, 0.00, 0.00, 0.00, 0.10, 0.10))
                .windSpeed10mScore(Arrays.asList(9.3, 9.2, 9.0, 8.9, 7.9, 6.9, 5.7, 4.1, 3.4, 3.2, 2.9, 2.5, 3.5, 4.8, 4.0, 1.8, 2.2,
                        3.4, 4.6, 3.1, 4.3, 4.8, 4.1, 4.2, 6.2, 7.0, 7.4, 8.6, 8.8, 9.7, 9.3, 9.7, 9.7, 9.7, 0.0, 0.4, 1.5, 1.5, 1.2,
                        1.4, 0.7, 0.0, 9.0, 8.2, 7.8, 8.1, 8.7, 7.6, 5.1, 5.2, 5.0, 5.2, 5.4, 5.4, 5.4, 5.7, 5.5, 6.0, 7.2, 7.6, 7.2,
                        7.3, 7.4, 7.4, 6.4, 3.9, 3.6, 3.3, 2.8, 2.5, 2.3, 2.1, 1.9, 1.9, 2.2, 2.2, 2.5, 2.2, 2.1, 2.1, 1.9, 2.3, 2.6,
                        3.0, 3.3, 3.6, 4.0, 4.2, 3.7, 2.8, 2.6, 2.6, 2.5, 2.9, 2.9, 3.3, 3.4, 3.4, 3.9, 3.9, 4.2, 4.7, 5.2, 5.8, 6.8,
                        7.8, 8.9, 9.8, 0.8, 1.8, 2.3, 2.6, 2.0, 1.0, 0.3, 0.3, 0.7, 0.6, 0.1, 9.4, 8.9, 0.0, 9.7, 9.7, 9.7, 9.2, 9.2,
                        9.7, 0.4, 1.1, 1.9, 2.2, 2.8, 3.4, 3.9, 4.0, 3.5, 2.8, 2.2, 1.6, 1.4, 1.5, 1.3, 1.4, 1.3, 1.1, 1.0, 0.8, 0.7,
                        0.7, 9.2, 7.2, 9.7, 3.2, 3.2, 0.8, 8.9, 8.0, 7.2, 6.8, 6.2, 5.4, 4.8, 4.0, 3.9, 3.1, 0.7, 5.1))
                .timeUnit("iso8601")
                .temperature2mUnit("Â°C")
                .rainUnit("mm")
                .windSpeed10mUnit("km/h")
                .build();*/
        final List<String> citiesWithRegions = Arrays.asList(
                "Warszawa, Mazowieckie",
                "Krakow, Malopolskie",
                "Lodz, Lodzkie",
                "Wroclaw, Dolnoslaskie",
                "Poznan, Wielkopolskie",
                "Gdansk, Pomorskie",
                "Szczecin, Zachodniopomorskie",
                "Bydgoszcz, Kujawsko-Pomorskie",
                "Lublin, Lubelskie",
                "Katowice, Slaskie",
                "Bialystok, Podlaskie",
                "Gdynia, Pomorskie",
                "Czestochowa, Slaskie",
                "Sosnowiec, Slaskie",
                "Torun, Kujawsko-Pomorskie",
                "Kielce, Swietokrzyskie",
                "Gliwice, Slaskie",
                "Zabrze, Slaskie",
                "Olsztyn, Warminsko-Mazurskie",
                "Bielsko-Biala, Slaskie",
                "Rzeszow, Podkarpackie",
                "Ruda Slaska, Slaskie",
                "Rybnik, Slaskie",
                "Dabrowa Gornicza, Slaskie",
                "Plock, Mazowieckie",
                "Elblag, Warminsko-Mazurskie",
                "Opole, Opolskie"
        );

        final WeatherRequestFormDto weatherRequestFormDto = WeatherRequestFormDto
                .builder()
                .temperature(true)
                .rain(true)
                .wind(true)
                .build();
        for(final String city : citiesWithRegions){
            weatherRequestFormDto.setCity(city);
            final CityDto cityDto = weatherService.getWeatherChartData(weatherRequestFormDto);
            final City cityEntity = CityMapper.toEntity(cityDto);
            repository.save(cityEntity);
        }
    }
}